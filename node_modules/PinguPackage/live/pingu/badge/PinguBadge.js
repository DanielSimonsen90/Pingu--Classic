"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetBadges = exports.Badges = exports.PinguBadge = void 0;
const discord_js_1 = require("discord.js");
class PinguBadge {
    constructor(name, emoji) {
        this.name = name;
        this.emoji = emoji;
    }
}
exports.PinguBadge = PinguBadge;
const PinguLibrary_1 = require("../library/PinguLibrary");
class TempBadge {
    constructor(name, emojiName, guild) {
        this.name = name;
        this.emojiName = emojiName;
        this.guild = guild;
    }
}
const badges = [
    new TempBadge('Pingu Developer', 'PinguDeveloper', 'Pingu Support'),
    new TempBadge('Discord Bot Developer', 'BadgeEarlyVerifiedBotDeveloper', 'Danho Misc'),
    new TempBadge('Pingu Staff Member', 'BadgeStaffTeam', 'Pingu Support'),
    new TempBadge('Pingu Support Team', 'BadgeSupportTeam', 'Pingu Support'),
    new TempBadge('Pingu Moderator Team', 'BadgeModeratorTeam', 'Pingu Support'),
    new TempBadge('Pingu Administrators', 'BadgeAdministratorTeam', 'Pingu Support'),
    new TempBadge('Early Supporter', 'BadgeEarlySupporter', 'Danho Misc'),
    new TempBadge('Patreon Supporter', null, null),
    new TempBadge('Partnered Developer', 'PinguPartnerDev', 'Pingu Support'),
    new TempBadge('Partnered Server Owner', 'PinguPartnerServer', 'Pingu Support')
];
exports.Badges = new discord_js_1.Collection();
function SetBadges() {
    for (const badge of badges) {
        let guild = PinguLibrary_1.SavedServers.get(badge.guild);
        let emoji = guild.emojis.cache.find(e => e.name == badge.emojiName);
        exports.Badges.set(badge.name, emoji);
    }
    return exports.Badges;
}
exports.SetBadges = SetBadges;
