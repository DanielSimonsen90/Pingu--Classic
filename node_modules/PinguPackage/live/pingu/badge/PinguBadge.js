"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBadges = exports.SetBadges = exports.Badges = exports.PinguBadge = void 0;
const discord_js_1 = require("discord.js");
class PinguBadge {
    constructor(name, emoji) {
        this.name = name;
        this.emoji = emoji;
    }
}
exports.PinguBadge = PinguBadge;
const PinguLibrary_1 = require("../library/PinguLibrary");
class TempBadge {
    constructor(name, emojiName, guild) {
        this.name = name;
        this.emojiName = emojiName;
        this.guild = guild;
    }
}
const badges = [
    new TempBadge('Pingu Developer', 'PinguDeveloper', 'Pingu Support'),
    new TempBadge('Discord Bot Developer', 'BadgeEarlyVerifiedBotDeveloper', 'Danho Misc'),
    new TempBadge('Pingu Staff Member', 'BadgeStaffTeam', 'Pingu Support'),
    new TempBadge('Pingu Support Team', 'BadgeSupportTeam', 'Pingu Support'),
    new TempBadge('Pingu Moderator Team', 'BadgeModeratorTeam', 'Pingu Support'),
    new TempBadge('Pingu Administrators', 'BadgeAdministratorTeam', 'Pingu Support'),
    new TempBadge('Early Supporter', 'BadgeEarlySupporter', 'Danho Misc'),
    // new TempBadge('Patreon Supporter', null, 'Pingu Support'),
    new TempBadge('Partnered Developer', 'PinguPartnerDev', 'Pingu Support'),
    new TempBadge('Partnered Server Owner', 'PinguPartnerServer', 'Pingu Support')
];
exports.Badges = new discord_js_1.Collection();
function SetBadges() {
    for (const badge of badges) {
        let guild = PinguLibrary_1.SavedServers.get(badge.guild);
        let emoji = guild.emojis.cache.find(e => e.name == badge.emojiName);
        exports.Badges.set(badge.name, emoji);
    }
    return exports.Badges;
}
exports.SetBadges = SetBadges;
const PinguUser_1 = require("../user/PinguUser");
function getBadges(user) {
    return __awaiter(this, void 0, void 0, function* () {
        const PinguSupportMembers = PinguLibrary_1.SavedServers.get('Pingu Support').members;
        let isPinguSupportMember = PinguSupportMembers.cache.has(user.id);
        if (!isPinguSupportMember)
            return null;
        let rolesToGiveBadge = (function setRolesToGive() {
            return new discord_js_1.Collection()
                .set('Discord Bot Developer', 'Discord Bot Developer')
                .set('Partnered Server Owner', 'Partnered Server Owner')
                .set('Partnered Bot Developer', 'Partnered Developer')
                .set('Pingu Staff', 'Pingu Staff Member')
                .set('Support Team', 'Pingu Support Team')
                .set('Moderators', 'Pingu Moderator Team')
                .set('Administrators', 'Pingu Administrators')
                .set('Pingu Developers', 'Pingu Developer');
        })();
        let member = yield PinguSupportMembers.fetch(user);
        let badges = member.roles.cache
            .map(role => rolesToGiveBadge.get(role.name)) //For each role member has, get a "IAmBadge" type if applicable
            .filter(v => v) //Filter away those that are null/undefined
            .map(name => exports.Badges.get(name)); //Convert IAmBadge to GuildEmoji
        const releaseDate = Date.now(); //TODO: Change when Pingu is finally released
        let pUser = yield PinguUser_1.GetPUser(user);
        if (new Date(pUser.joinedAt).getTime() < releaseDate)
            badges.push(exports.Badges.get('Early Supporter'));
        //Add Patreon badge
        return badges;
    });
}
exports.getBadges = getBadges;
