"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.raspberryLog = exports.latencyCheck = exports.tellLog = exports.eventLog = exports.consoleLog = exports.pUserLog = exports.pGuildLog = exports.errorLog = void 0;
const PinguLibrary_1 = require("./PinguLibrary");
const PinguEvents_1 = require("../PinguEvents");
const config = require("../../config.json");
const { version } = config;
function errorLog(client, message, messageContent, err) {
    return __awaiter(this, void 0, void 0, function* () {
        var errorlogChannel = PinguLibrary_1.PinguLibrary.getChannel(client, PinguLibrary_1.PinguLibrary.SavedServers.PinguSupport(client).id, 'error-log-‚ö†');
        if (!errorlogChannel)
            return PinguLibrary_1.PinguLibrary.DanhoDM(client, 'Unable to find #error-log-‚ö†Ô∏è in Pingu Support, https://discord.gg/gbxRV4Ekvh');
        console.error(getErrorMessage(message.includes('`') ? message.replace('`', ' ') : message, messageContent, err));
        let sent = yield errorlogChannel.send(getErrorMessage(message, messageContent, err));
        yield sent.react(PinguLibrary_1.PinguLibrary.SavedServers.DanhoMisc(client).emojis.cache.find(e => e.name == 'Checkmark'));
        return sent;
        function getErrorMessage(message, messageContent, err) {
            let result = {
                format: "```\n",
                providedMessage: `[Provided Message]\n${message}\n\n`,
                errorMessage: `[Error message]: \n${err && err.message}\n\n`,
                messageContent: `[Message content]\n${messageContent}\n\n`,
                stack: `[Stack]\n${err && err.stack}\n\n\n`,
                fileMessage: `${err && err.fileName} threw an error at line ${err && err.lineNumber}!\n\n`
            };
            let returnMessage = (result.format +
                (err && err.fileName && err.lineNumber ? result.fileMessage : "") +
                result.providedMessage +
                (messageContent ? result.messageContent : "") +
                (err ? result.errorMessage + result.stack : "") +
                result.format);
            PinguLibrary_1.PinguLibrary.consoleLog(client, returnMessage);
            return returnMessage;
        }
    });
}
exports.errorLog = errorLog;
function pGuildLog(client, script, message, err) {
    return __awaiter(this, void 0, void 0, function* () {
        var pinguGuildLog = PinguLibrary_1.PinguLibrary.getChannel(client, this.SavedServers.PinguSupport(client).id, "pingu-guild-log-üè°");
        if (!pinguGuildLog)
            return PinguLibrary_1.PinguLibrary.DanhoDM(client, `Couldn't get #pingu-guild-log-üè° in Pingu Support, https://discord.gg/gbxRV4Ekvh`);
        if (err) {
            var errorLink = (yield PinguLibrary_1.PinguLibrary.errorLog(client, `pGuild Error: "${message}"`, null, err)).url;
            return pinguGuildLog.send(`[**Failed**] [**${script}**]: ${message}\n${err.message}\n\n${errorLink}\n\n<@&756383446871310399>`);
        }
        return pinguGuildLog.send(`[**Success**] [**${script}**]: ${message}`);
    });
}
exports.pGuildLog = pGuildLog;
function pUserLog(client, script, message, err) {
    return __awaiter(this, void 0, void 0, function* () {
        var pinguUserLog = PinguLibrary_1.PinguLibrary.getChannel(client, this.SavedServers.PinguSupport(client).id, "pingu-user-log-üßç");
        if (!pinguUserLog)
            return PinguLibrary_1.PinguLibrary.DanhoDM(client, `Couldn't get #pingu-user-log-üßç in Pingu Support, https://discord.gg/gbxRV4Ekvh`);
        if (err) {
            var errorLink = (yield PinguLibrary_1.PinguLibrary.errorLog(client, `pUser Error (**${script}**): "${message}"`, null, err)).url;
            return pinguUserLog.send(`[**Failed**] [**${script}**]: ${message}\n${err.message}\n\n${errorLink}\n\n<@&756383446871310399>`);
        }
        return pinguUserLog.send(`[**Success**] [**${script}**]: ${message}`);
    });
}
exports.pUserLog = pUserLog;
function consoleLog(client, message) {
    return __awaiter(this, void 0, void 0, function* () {
        let timeFormat = `[${new Date(Date.now()).toLocaleTimeString()}]`;
        console.log(`${timeFormat} ${message}`);
        let consoleLogChannel = PinguLibrary_1.PinguLibrary.getChannel(client, this.SavedServers.PinguSupport(client).id, "console-log-üìù");
        if (!consoleLogChannel)
            return PinguLibrary_1.PinguLibrary.DanhoDM(client, 'Unable to find #console-log-üìù in Pingu Support, https://discord.gg/gbxRV4Ekvh');
        consoleLogChannel.send(message);
    });
}
exports.consoleLog = consoleLog;
function eventLog(client, content) {
    return __awaiter(this, void 0, void 0, function* () {
        if (client.user.id == PinguLibrary_1.PinguLibrary.Clients.BetaID)
            return;
        let eventLogChannel = PinguLibrary_1.PinguLibrary.getChannel(client, this.SavedServers.PinguSupport(client).id, "event-log-üìπ");
        if (!eventLogChannel)
            return PinguLibrary_1.PinguLibrary.DanhoDM(client, `Couldn't get #event-log-üìπ channel in Pingu Support, https://discord.gg/gbxRV4Ekvh`);
        if (!PinguEvents_1.PinguEvents.LoggedCache)
            PinguEvents_1.PinguEvents.LoggedCache = new Array();
        let lastCache = PinguEvents_1.PinguEvents.LoggedCache[0];
        if (lastCache && (lastCache.description && lastCache.description == content.description ||
            lastCache.fields[0] && content.fields[0] && lastCache.fields[0].value == content.fields[0].value))
            return;
        PinguEvents_1.PinguEvents.LoggedCache.unshift(content);
        return yield eventLogChannel.send(content);
    });
}
exports.eventLog = eventLog;
function tellLog(client, sender, reciever, message) {
    return __awaiter(this, void 0, void 0, function* () {
        if (client.user.id == PinguLibrary_1.PinguLibrary.Clients.BetaID)
            return;
        var tellLogChannel = PinguLibrary_1.PinguLibrary.getChannel(client, this.SavedServers.PinguSupport(client).id, 'tell-log-üí¨');
        if (!tellLogChannel)
            return PinguLibrary_1.PinguLibrary.DanhoDM(client, `Couldn't get #tell-log-üí¨ channel in Pingu Support, https://discord.gg/gbxRV4Ekvh`);
        if (message.constructor.name == "Message") {
            var messageAsMessage = message;
            var consoleLog = messageAsMessage.content ?
                `${sender.username} sent a message to ${reciever.username} saying ` :
                messageAsMessage.attachments.array().length == 1 ?
                    `${sender.username} sent a file to ${reciever.username}` :
                    messageAsMessage.attachments.array().length > 1 ?
                        `${sender.username} sent ${messageAsMessage.attachments.array().length} files to ${reciever.username}` :
                        `${sender.username} sent something unknown to ${reciever.username}!`;
            if (messageAsMessage.content)
                consoleLog += messageAsMessage.content;
            if (messageAsMessage.attachments)
                consoleLog += messageAsMessage.attachments.map(a => `\n${a.url}`);
            PinguLibrary_1.PinguLibrary.consoleLog(client, consoleLog);
            var format = (ping) => `${new Date(Date.now()).toLocaleTimeString()} [<@${(ping ? sender : sender.username)}> ‚û°Ô∏è <@${(ping ? reciever : reciever.username)}>]`;
            if (messageAsMessage.content && messageAsMessage.attachments)
                tellLogChannel.send(format(false) + `: ||${messageAsMessage.content}||`, messageAsMessage.attachments.array())
                    .then(sent => sent.edit(format(true) + `: ||${messageAsMessage.content}||`));
            else if (messageAsMessage.content)
                tellLogChannel.send(format(false) + `: ||${messageAsMessage.content}||`)
                    .then(sent => sent.edit(format(true) + `: ||${messageAsMessage.content}||`));
            else if (messageAsMessage.attachments)
                tellLogChannel.send(format(false), messageAsMessage.attachments.array())
                    .then(sent => sent.edit(format(true)));
            else
                this.errorLog(client, `${sender} ‚û°Ô∏è ${reciever} sent something that didn't have content or attachments`)
                    .then(() => tellLogChannel.send(`Ran else statement - reported to ${tellLogChannel.guild.channels.cache.find(c => c.name == 'error-log')}`));
        }
        else if (message.constructor.name == "MessageEmbed") {
            this.consoleLog(client, `The link between ${sender.username} & ${reciever.username} was unset.`);
            tellLogChannel.send(message);
        }
    });
}
exports.tellLog = tellLog;
function latencyCheck(message) {
    return __awaiter(this, void 0, void 0, function* () {
        //Get latency
        let pingChannel = PinguLibrary_1.PinguLibrary.getChannel(message.client, PinguLibrary_1.PinguLibrary.SavedServers.PinguSupport(message.client).id, "ping-log-üèì");
        if (!pingChannel)
            return PinguLibrary_1.PinguLibrary.DanhoDM(message.client, `Couldn't get #ping-log-üèì channel in Pingu Support, https://discord.gg/gbxRV4Ekvh`);
        if (message.channel == pingChannel || message.author.bot)
            return null;
        let pingChannelSent = yield pingChannel.send(`Calculating ping`);
        let latency = pingChannelSent.createdTimestamp - message.createdTimestamp;
        pingChannelSent.edit(latency + 'ms');
        //Get outages channel
        let outages = PinguLibrary_1.PinguLibrary.getChannel(message.client, PinguLibrary_1.PinguLibrary.SavedServers.PinguSupport(message.client).id, "outages-üòµ");
        if (!outages)
            return PinguLibrary_1.PinguLibrary.errorLog(message.client, `Unable to find #outages-üòµ channel from LatencyCheck!`);
        //Set up to find last Pingu message
        let outagesMessages = outages.messages.cache.array();
        let outageMessagesCount = outagesMessages.length - 1;
        //Find Pingu message
        for (var i = outageMessagesCount - 1; i >= 0; i--) {
            if (outagesMessages[i].author != message.client.user)
                continue;
            var lastPinguMessage = outagesMessages[i];
        }
        if (!lastPinguMessage)
            return null;
        let sendMessage = !lastPinguMessage.content.includes(`I have a latency delay on`);
        if (!sendMessage) {
            let lastMessageArgs = lastPinguMessage.content.split(` `);
            let lastLatencyExclaim = lastMessageArgs[lastMessageArgs.length - 1];
            let lastLatency = parseInt(lastLatencyExclaim.substring(0, lastLatencyExclaim.length - 1));
            if (lastLatency > 1000)
                return lastPinguMessage.edit(`I have a latency delay on ${latency}!`);
        }
        if (latency > 1000)
            PinguLibrary_1.PinguLibrary.outages(message.client, `I have a latency delay on ${latency}!`);
    });
}
exports.latencyCheck = latencyCheck;
function raspberryLog(client) {
    return __awaiter(this, void 0, void 0, function* () {
        if (client.user.id == PinguLibrary_1.PinguLibrary.Clients.BetaID)
            return;
        let raspberryLogChannel = this.getChannel(client, this.SavedServers.PinguSupport(client).id, 'raspberry-log-üçá');
        if (!raspberryLogChannel)
            return this.DanhoDM(client, `Couldn't get #raspberry-log-üçá channel in Pingu Support, https://discord.gg/gbxRV4Ekvh`);
        return raspberryLogChannel.send(`Pulled version ${version} from Github`);
    });
}
exports.raspberryLog = raspberryLog;
