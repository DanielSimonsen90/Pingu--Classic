"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSharedServers = exports.getServer = exports.SavedServers = void 0;
exports.SavedServers = {
    DanhoMisc(client) {
        return getServer(client, '460926327269359626');
    },
    PinguSupport(client) {
        return getServer(client, '756383096646926376');
    },
    PinguEmotes(client) {
        return getServer(client, '791312245555855401');
    },
    DeadlyNinja(client) {
        return getServer(client, '405763731079823380');
    }
};
function getServer(client, id) {
    return client.guilds.cache.find(g => g.id == id);
}
exports.getServer = getServer;
function getSharedServers(client, user) {
    return __awaiter(this, void 0, void 0, function* () {
        let servers = new Array();
        for (var guild of client.guilds.cache.array()) {
            if (yield guild.members.fetch(user))
                servers.push(guild);
        }
        return servers;
    });
}
exports.getSharedServers = getSharedServers;
