"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DanhoDM = exports.outages = exports.getChannel = void 0;
const PinguLibrary_1 = require("./PinguLibrary");
function getChannel(client, guildID, channelname) {
    var guild = client.guilds.cache.find(guild => guild.id == guildID);
    if (!guild) {
        console.error(`Unable to get guild from ${guildID}`);
        return null;
    }
    var channel = guild.channels.cache.find(channel => channel.name == channelname);
    if (!channel) {
        console.error(`Unable to get channel from ${channelname}`);
        return null;
    }
    return channel;
}
exports.getChannel = getChannel;
function outages(client, message) {
    return __awaiter(this, void 0, void 0, function* () {
        var outageChannel = PinguLibrary_1.PinguLibrary.getChannel(client, '756383096646926376', 'outages');
        if (!outageChannel)
            return PinguLibrary_1.PinguLibrary.DanhoDM(client, `Couldn't get #outage channel in Pingu Support, https://discord.gg/Mp4CH8eftv`);
        PinguLibrary_1.PinguLibrary.consoleLog(client, message);
        let sent = yield outageChannel.send(message);
        return sent.crosspost();
    });
}
exports.outages = outages;
function DanhoDM(client, message) {
    return __awaiter(this, void 0, void 0, function* () {
        console.error(message);
        let { Danho } = PinguLibrary_1.PinguLibrary.Developers(client);
        if (!Danho)
            return;
        return (yield Danho().createDM()).send(message);
    });
}
exports.DanhoDM = DanhoDM;
