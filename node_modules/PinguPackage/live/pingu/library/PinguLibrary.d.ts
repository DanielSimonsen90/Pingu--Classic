import { Client, Guild, GuildChannel, Message, MessageEmbed, User, Collection } from 'discord.js';
import { EmbedField, Error } from '../../helpers';
declare class PinguLibrary {
    static setActivity(client: Client): void;
    static DefaultEmbedColor: number;
    static DefaultPrefix(client: Client): string;
    static Clients: {
        PinguID: string;
        BetaID: string;
    };
    static PermissionCheck(check: {
        author: User;
        channel: GuildChannel;
        client: Client;
        content: string;
    }, permissions: string[]): string;
    static readonly PermissionGranted: string;
    static Permissions(): {
        given: import("PinguPackage/src/helpers").BitPermission[];
        missing: import("PinguPackage/src/helpers").BitPermission[];
        all: import("PinguPackage/src/helpers").BitPermission[];
    };
    static PinguSupportInvite: string;
    static readonly SavedServers: {
        DanhoMisc(client: Client): Guild;
        PinguSupport(client: Client): Guild;
        PinguEmotes(client: Client): Guild;
        DeadlyNinja(client: Client): Guild;
    };
    private static getServer;
    static getSharedServers(client: Client, user: User): Promise<Guild[]>;
    static readonly Developers: Collection<string, User>;
    static CacheDevelopers(client: Client): Promise<Collection<string, User>>;
    static isPinguDev(user: User): boolean;
    static getChannel(client: Client, guildID: string, channelname: string): import("discord.js").TextChannel;
    static outages(client: Client, message: string): Promise<Message>;
    static DanhoDM(client: Client, message: string): Promise<Message>;
    static errorCache: Collection<number, Message[]>;
    static errorLog(client: Client, message: string, messageContent?: string, err?: Error, errorID?: number): Promise<void | Message>;
    static pGuildLog(client: Client, script: string, message: string, err?: Error): Promise<Message>;
    static pUserLog(client: Client, script: string, message: string, err?: Error): Promise<Message>;
    static consoleLog(client: Client, message: string): Promise<Message>;
    static eventLog(client: Client, content: MessageEmbed): Promise<Message>;
    static tellLog(client: Client, sender: User, reciever: User, message: Message | MessageEmbed): Promise<Message>;
    static latencyCheck(message: Message): Promise<void | Message>;
    static raspberryLog(client: Client): Promise<Message>;
    static getEmote(client: Client, name: string, emoteGuild: Guild): import("discord.js").GuildEmoji | "ðŸ˜µ";
    static getImage(script: string, imageName: string): string;
    static DBExecute(client: Client, callback: (mongoose: typeof import('mongoose')) => void): Promise<void>;
    static BlankEmbedField(inline?: boolean): EmbedField;
}
export { PinguLibrary };
