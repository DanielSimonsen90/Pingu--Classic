"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPUsers = exports.DeletePUser = exports.UpdatePUser = exports.GetPUser = exports.WritePUser = void 0;
const PinguUserSchema = require("../../MongoSchemas/PinguUser");
const helpers_1 = require("../../helpers");
const PinguLibrary_1 = require("../library/PinguLibrary");
const PinguUser_1 = require("../user/PinguUser");
function WritePUser(client, user, scriptName, succMsg, errMsg) {
    return __awaiter(this, void 0, void 0, function* () {
        PinguLibrary_1.PinguLibrary.DBExecute(client, (mongoose) => __awaiter(this, void 0, void 0, function* () {
            let created = yield new PinguUserSchema(new PinguUser_1.PinguUser(user)).save();
            if (!created)
                PinguLibrary_1.PinguLibrary.pUserLog(client, scriptName, errMsg);
            else
                PinguLibrary_1.PinguLibrary.pUserLog(client, scriptName, succMsg);
        }));
    });
}
exports.WritePUser = WritePUser;
function GetPUser(user) {
    return __awaiter(this, void 0, void 0, function* () {
        let pUserDoc = yield PinguUserSchema.findOne({ _id: user.id }).exec();
        return pUserDoc ? pUserDoc.toObject() : null;
    });
}
exports.GetPUser = GetPUser;
function UpdatePUser(client, updatedProperty, pUser, scriptName, succMsg, errMsg) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield PinguUserSchema.updateOne({ _id: pUser._id }, updatedProperty, null, err => {
            if (err)
                PinguLibrary_1.PinguLibrary.pUserLog(client, scriptName, errMsg, err);
            else
                PinguLibrary_1.PinguLibrary.pUserLog(client, scriptName, succMsg);
        });
    });
}
exports.UpdatePUser = UpdatePUser;
function DeletePUser(client, user, scriptName, succMsg, errMsg) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield PinguUserSchema.deleteOne({ _id: user.id }, null, err => {
            if (err)
                PinguLibrary_1.PinguLibrary.pUserLog(client, scriptName, errMsg, new helpers_1.Error(err));
            else
                PinguLibrary_1.PinguLibrary.pUserLog(client, scriptName, succMsg);
        });
    });
}
exports.DeletePUser = DeletePUser;
function GetPUsers() {
    return __awaiter(this, void 0, void 0, function* () {
        return (yield PinguUserSchema.find({}).exec()).map(collDoc => collDoc.toObject());
    });
}
exports.GetPUsers = GetPUsers;
