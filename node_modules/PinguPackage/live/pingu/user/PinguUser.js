"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinguUser = void 0;
const database_1 = require("../../database");
const items_1 = require("./items");
const CRUD_1 = require("./CRUD");
class PinguUser {
    constructor(user) {
        let pUser = new database_1.PUser(user);
        this._id = pUser._id;
        this.tag = pUser.name;
        this.sharedServers = user.client.guilds.cache.filter(g => g.members.cache.has(user.id)).map(g => new database_1.PGuild(g));
        this.marry = new items_1.Marry();
        this.replyPerson = null;
        this.daily = new items_1.Daily();
        this.avatar = user.avatarURL();
        this.playlists = new Array();
    }
    static WritePUser(client, user, scriptName, succMsg, errMsg) {
        return __awaiter(this, void 0, void 0, function* () {
            return CRUD_1.WritePUser(client, user, scriptName, succMsg, errMsg);
        });
    }
    static GetPUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            return CRUD_1.GetPUser(user);
        });
    }
    static UpdatePUser(client, updatedProperty, pUser, scriptName, succMsg, errMsg) {
        return __awaiter(this, void 0, void 0, function* () {
            return CRUD_1.UpdatePUser(client, updatedProperty, pUser, scriptName, succMsg, errMsg);
        });
    }
    static DeletePUser(client, user, scriptName, succMsg, errMsg) {
        return __awaiter(this, void 0, void 0, function* () {
            return CRUD_1.DeletePUser(client, user, scriptName, succMsg, errMsg);
        });
    }
    static GetPUsers() {
        return __awaiter(this, void 0, void 0, function* () {
            return CRUD_1.GetPUsers();
        });
    }
}
exports.PinguUser = PinguUser;
