"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactionRole = exports.GetReactionRole = void 0;
const PinguGuild_1 = require("../PinguGuild");
const json_1 = require("../../../database/json");
const PinguLibrary_1 = require("../../library/PinguLibrary");
function GetReactionRole(client, reaction, user) {
    return __awaiter(this, void 0, void 0, function* () {
        let guild = reaction.message.guild;
        let pGuild = yield PinguGuild_1.GetPGuild(guild);
        var rr = pGuild.settings.reactionRoles.find(rr => rr.messageID == reaction.message.id &&
            (rr.emoteName == reaction.emoji.name) &&
            rr.channel._id == reaction.message.channel.id);
        if (!rr)
            return null;
        let { pRole } = rr;
        let member = guild.member(user);
        let permCheck = PinguLibrary_1.PermissionCheck({
            author: client.user,
            client,
            channel: reaction.message.channel,
            content: "No content provided"
        }, 'MANAGE_ROLES');
        if (permCheck != PinguLibrary_1.PermissionGranted) {
            guild.owner.send(`I tried to give ${member.displayName} the ${pRole.name}, as ${permCheck}`);
            user.send(`I'm unable to give you the reactionrole at the moment! I've contacted ${user.username} about this.`);
            return null;
        }
        return guild.roles.fetch(pRole._id);
    });
}
exports.GetReactionRole = GetReactionRole;
class ReactionRole {
    constructor(message, reactionName, role) {
        this.emoteName = reactionName;
        this.pRole = new json_1.PRole(role);
        this.channel = new json_1.PChannel(message.channel);
        this.messageID = message.id;
    }
    static GetReactionRole(client, reaction, user) {
        return __awaiter(this, void 0, void 0, function* () { return GetReactionRole(client, reaction, user); });
    }
}
exports.ReactionRole = ReactionRole;
