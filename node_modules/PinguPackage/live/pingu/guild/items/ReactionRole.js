"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const PinguGuild_1 = require("../PinguGuild");
const database_1 = require("../../../database");
const helpers_1 = require("../../../helpers");
const PinguLibrary_1 = require("../../library/PinguLibrary");
class ReactionRole {
    constructor(message, reactionName, role) {
        this.emoteName = reactionName;
        this.pRole = new database_1.PRole(role);
        this.channel = new database_1.PChannel(message.channel);
        this.messageID = message.id;
    }
    static GetReactionRole(client, reaction, user) {
        return __awaiter(this, void 0, void 0, function* () {
            let guild = reaction.message.guild;
            let pGuild = yield PinguGuild_1.PinguGuild.GetPGuild(guild);
            var rr = pGuild.reactionRoles.find(rr => rr.messageID == reaction.message.id &&
                (rr.emoteName == reaction.emoji.name) &&
                rr.channel._id == reaction.message.channel.id);
            if (!rr)
                return null;
            let { pRole } = rr;
            let member = guild.member(user);
            let permCheck = PinguLibrary_1.PinguLibrary.PermissionCheck({
                author: client.user,
                client,
                channel: reaction.message.channel,
                content: "No content provided"
            }, [helpers_1.DiscordPermissions.MANAGE_ROLES]);
            if (permCheck != PinguLibrary_1.PinguLibrary.PermissionGranted) {
                guild.owner.send(`I tried to give ${member.displayName} the ${pRole.name}, as ${permCheck}`);
                user.send(`I'm unable to give you the reactionrole at the moment! I've contacted ${user.username} about this.`);
                return null;
            }
            return guild.roles.fetch(pRole._id);
        });
    }
}
exports.default = ReactionRole;
