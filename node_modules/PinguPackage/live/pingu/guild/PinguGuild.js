"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinguGuild = void 0;
const database_1 = require("../../database");
const PinguLibrary_1 = require("../library/PinguLibrary");
const config_1 = require("../../decidable/config");
const CRUD_1 = require("./CRUD");
const statics_1 = require("./statics");
class PinguGuild extends database_1.PItem {
    constructor(guild, owner) {
        super(guild);
        if (guild.owner)
            this.guildOwner = new database_1.PGuildMember(guild.owner);
        else if (owner)
            this.guildOwner = new database_1.PGuildMember(owner);
        else
            PinguLibrary_1.PinguLibrary.errorLog(guild.client, `Owner wasn't set when making Pingu Guild for "${guild.name}".`);
        this.clients = new Array();
        let clientIndex = guild.client.user.id == PinguLibrary_1.PinguLibrary.Clients.PinguID ? 0 : 1;
        if (clientIndex != 0)
            this.clients.push(null);
        this.clients[clientIndex] = new database_1.PClient(guild.client, guild);
        let welcomeChannel = guild.channels.cache.find(c => c.isText() && c.name.includes('welcome')) ||
            guild.channels.cache.find(c => c.isText() && c.name == 'general');
        if (welcomeChannel)
            this.welcomeChannel = new database_1.PChannel(welcomeChannel);
        this.reactionRoles = new Array();
        this.giveawayConfig = new config_1.GiveawayConfig();
        this.pollConfig = new config_1.PollConfig();
        this.suggestionConfig = new config_1.SuggestionConfig();
        if (guild.id == '405763731079823380')
            this.themeWinners = new Array();
    }
    static WritePGuild(client, guild, scriptName, succMsg, errMsg) {
        return __awaiter(this, void 0, void 0, function* () {
            return CRUD_1.WritePGuild(client, guild, scriptName, succMsg, errMsg);
        });
    }
    static GetPGuild(guild) {
        return __awaiter(this, void 0, void 0, function* () {
            return CRUD_1.GetPGuild(guild);
        });
    }
    static UpdatePGuild(client, updatedProperty, pGuild, scriptName, succMsg, errMsg) {
        return __awaiter(this, void 0, void 0, function* () {
            return CRUD_1.UpdatePGuild(client, updatedProperty, pGuild, scriptName, succMsg, errMsg);
        });
    }
    static DeletePGuild(client, guild, scriptName, succMsg, errMsg) {
        return __awaiter(this, void 0, void 0, function* () {
            return CRUD_1.DeletePGuild(client, guild, scriptName, succMsg, errMsg);
        });
    }
    static GetPGuilds() {
        return __awaiter(this, void 0, void 0, function* () {
            return CRUD_1.GetPGuilds();
        });
    }
    static GetPClient(client, pGuild) {
        return statics_1.GetPClient(client, pGuild);
    }
}
exports.PinguGuild = PinguGuild;
