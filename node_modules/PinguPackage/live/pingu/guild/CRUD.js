"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPGuilds = exports.DeletePGuild = exports.UpdatePGuild = exports.GetPGuild = exports.WritePGuild = void 0;
const PinguLibrary_1 = require("../library/PinguLibrary");
const PinguGuild_1 = require("../guild/PinguGuild");
const helpers_1 = require("../../helpers");
const PinguGuildSchema = require("../../MongoSchemas/PinguGuild");
function WritePGuild(client, guild, scriptName, succMsg, errMsg) {
    return __awaiter(this, void 0, void 0, function* () {
        PinguLibrary_1.PinguLibrary.DBExecute(client, (mongoose) => __awaiter(this, void 0, void 0, function* () {
            let created = yield new PinguGuildSchema(new PinguGuild_1.PinguGuild(guild, !guild.owner ? guild.member(yield client.users.fetch(guild.ownerID)) : null));
            if (!created)
                return PinguLibrary_1.PinguLibrary.pGuildLog(client, scriptName, errMsg);
            created.save();
            return PinguLibrary_1.PinguLibrary.pGuildLog(client, scriptName, succMsg);
        }));
    });
}
exports.WritePGuild = WritePGuild;
function GetPGuild(guild) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!guild)
            return null;
        let pGuildDoc = yield PinguGuildSchema.findOne({ _id: guild.id }).exec();
        return pGuildDoc ? pGuildDoc.toObject() : null;
    });
}
exports.GetPGuild = GetPGuild;
function UpdatePGuild(client, updatedProperty, pGuild, scriptName, succMsg, errMsg) {
    return __awaiter(this, void 0, void 0, function* () {
        let guild = yield client.guilds.fetch(pGuild._id);
        if (!guild)
            throw new helpers_1.Error({ message: `Guild not found!` });
        PinguGuildSchema.updateOne({ _id: pGuild._id }, updatedProperty, null, err => {
            if (err)
                PinguLibrary_1.PinguLibrary.pGuildLog(client, scriptName, errMsg, err);
            else
                PinguLibrary_1.PinguLibrary.pGuildLog(client, scriptName, succMsg);
        });
    });
}
exports.UpdatePGuild = UpdatePGuild;
function DeletePGuild(client, guild, scriptName, succMsg, errMsg) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield PinguGuildSchema.deleteOne({ _id: guild.id }, null, err => {
            if (err)
                PinguLibrary_1.PinguLibrary.pGuildLog(client, scriptName, errMsg, new helpers_1.Error(err));
            else
                PinguLibrary_1.PinguLibrary.pGuildLog(client, scriptName, succMsg);
        });
    });
}
exports.DeletePGuild = DeletePGuild;
function GetPGuilds() {
    return __awaiter(this, void 0, void 0, function* () {
        return (yield PinguGuildSchema.find({}).exec()).map(collDoc => collDoc.toObject());
    });
}
exports.GetPGuilds = GetPGuilds;
