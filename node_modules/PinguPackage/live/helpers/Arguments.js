"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Arguments = exports.Mention = void 0;
const discord_js_1 = require("discord.js");
class Mention {
    constructor(prop, v, i, types) {
        this.mentionType = prop.toUpperCase();
        this.value = types[prop].test(v);
        this.index = i;
    }
}
exports.Mention = Mention;
class Arguments extends Array {
    get first() {
        return this[0];
    }
    get last() {
        return this[this.length - 1];
    }
    get mentions() {
        const snowflakeLength = 18;
        const types = {
            user: new RegExp(`<@\\d{${snowflakeLength}}>` || /<@\d{18}>/),
            nickname: new RegExp(`<@!\\d{${snowflakeLength}}>` || /<@!\d{18}>/),
            channel: new RegExp(`<#\\d{${snowflakeLength}}>` || /<#\d{18}>/),
            role: new RegExp(`<@&\\d{${snowflakeLength}}>` || /<@&\d{18}>/),
            everyone: new RegExp(`@everyone`),
            here: new RegExp(`@here`),
            mentions: (v, i) => Object.keys(this)
                .map(prop => new Mention(prop, v, i, this))
                .filter(obj => obj.value)
        };
        return this.map(types.mentions).reduce((result, argument) => {
            for (const m of argument) {
                if (!result.has(m.mentionType) || !result.get(m.mentionType).value)
                    result.set(m.mentionType, m);
            }
            return result;
        }, new discord_js_1.Collection());
    }
    get(match) {
        const i = typeof match == 'string' ? this.findIndex(v => v == match) : this.findIndexRegex(match.source);
        return this.splice(i)[0];
    }
    findIndexRegex(regexValue) {
        for (const item of this) {
            if (new RegExp(regexValue).test(item))
                return this.indexOf(item);
        }
    }
    lowercase() {
        for (const item of this) {
            this[item] = item.toLowerCase();
        }
        return this;
    }
}
exports.Arguments = Arguments;
exports.default = Arguments;
