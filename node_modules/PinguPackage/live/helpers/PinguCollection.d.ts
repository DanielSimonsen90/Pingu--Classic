import { Base, Collection, Message, Snowflake, TextChannel } from 'discord.js';
import BasePinguClient from '../pingu/client/BasePinguClient';
import Reason from '../helpers/Reason';
import Error from '../helpers/Error';
declare type SavedSchemas = 'PinguUser' | 'PinguGuild';
interface IName {
    name?: string;
    tag?: string;
}
interface BaseT extends Base, IName {
    id: Snowflake;
}
interface BasePT extends IName {
    _id: Snowflake;
}
interface BaseManager<T> {
    fetch(id: Snowflake, cache?: boolean, force?: boolean): Promise<T>;
    cache: Collection<Snowflake, T>;
}
export declare class PinguCollection<T extends BaseT, PT extends BasePT> {
    constructor(client: BasePinguClient<any>, logChannelName: string, schemaName: SavedSchemas, newPT: (item: T, client: BasePinguClient<any>) => PT, typeManager: (client: BasePinguClient<any>) => BaseManager<T>);
    private _logChannelName;
    get logChannel(): TextChannel;
    private _model;
    private _schemaName;
    private _inner;
    private _newPT;
    private _typeManager;
    private _client;
    add(item: T, scriptName: string, reason: string): Promise<PT>;
    get(item: T): PT;
    array(): PT[];
    update(pItem: PT, scriptName: string, reason: string): Promise<PT>;
    delete(item: T, scriptName: string, reason: string): Promise<this>;
    find(predicate: (pItem: PT, item: T, index: number, self: this) => boolean): PT;
    has(item: T): boolean;
    refresh(client?: BasePinguClient<any>): Promise<this>;
    log(script: string, reason: Reason, err?: Error): Promise<Message>;
}
export default PinguCollection;
