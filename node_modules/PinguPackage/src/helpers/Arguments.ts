import { Collection } from "discord.js";

type MentionType = 'USER' | 'NICKNAME' | 'CHANNEL' | 'ROLE' | 'EVERYONE' | 'HERE';

export class Mention {
    constructor(prop: string, v: string, i: number, types: {}) {
        this.mentionType = prop.toUpperCase() as MentionType;
        this.value = (types[prop] as RegExp).test(v);
        this.index = i;
    }

    public mentionType: MentionType;
    public value: boolean;
    public index: number;
}

export class Arguments extends Array<string> {
    public get first() {
        return this[0];
    }
    public get last() {
        return this[this.length - 1];
    }

    public get mentions() {
        const snowflakeLength = 18;
        const types = {
            user: new RegExp(`<@\\d{${snowflakeLength}}>` || /<@\d{18}>/),
            nickname: new RegExp(`<@!\\d{${snowflakeLength}}>` || /<@!\d{18}>/),
            channel: new RegExp(`<#\\d{${snowflakeLength}}>` || /<#\d{18}>/),
            role: new RegExp(`<@&\\d{${snowflakeLength}}>` || /<@&\d{18}>/),
            everyone: new RegExp(`@everyone`),
            here: new RegExp(`@here`),

            mentions: (v: string, i: number) => Object.keys(this)
                .map(prop => new Mention(prop, v, i, this))
                .filter(obj => obj.value)
        };
        
        return this.map(types.mentions).reduce((result, argument) => {
            for (const m of argument) {
                if (!result.has(m.mentionType) || !result.get(m.mentionType).value) 
                    result.set(m.mentionType, m);
            }
            return result;
        }, new Collection<MentionType, Mention>());
    }

    public get(match: RegExp | string) {
        const i = typeof match == 'string' ? this.findIndex(v => v == match) : this.findIndexRegex(match.source);
        return this.splice(i)[0];        
    }
    public findIndexRegex(regexValue: string) {
        for (const item of this) {
            if (new RegExp(regexValue).test(item))
                return this.indexOf(item);
        }
    }
    public lowercase() {
        for (const item of this) {
            this[item] = item.toLowerCase();
        }
        return this;
    }
}

export default Arguments;