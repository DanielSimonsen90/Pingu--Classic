import { 
    Client, Collection, Message, 
    MessageReaction, Invite, Guild, 
    GuildMember, User, GuildEmoji, 
    Presence, Role, VoiceState, MessageEmbed 
} from 'discord.js'

import PinguHandler from './PinguHandler'

export interface PinguEventParams {
    client?: Client,
    messages?: Collection<string, Message>,
    reaction?: MessageReaction,
    invite?: Invite,

    guild?: Guild,
    preGuild?: Guild,

    message?: Message,
    preMessage?: Message,

    member?: GuildMember,
    preMember?: GuildMember,

    user?: User,
    preUser?: User,

    emote?: GuildEmoji,
    preEmote?: GuildEmoji,

    presence?: Presence,
    prePresence?: Presence,

    role?: Role,
    preRole?: Role,

    state?: VoiceState
    preState?: VoiceState
}

export default class PinguEvent extends PinguHandler {
    constructor(name: string, handlers?: {
            setContent?: (params: PinguEventParams) => Promise<MessageEmbed>,
            execute?: (client: Client, params?: PinguEventParams) => Promise<void | Message>
        }) {
        super(name);
        
        if (handlers) {
            const { setContent, execute } = handlers;
            if (setContent != undefined) this.setContent = setContent;
            if (execute != undefined) this.execute = execute;
        }
    }

    public name: string;
    public path: string;
    public content: MessageEmbed;

    public async setContent(params: PinguEventParams): Promise<MessageEmbed> {
        return null;
    }
    public async execute(client: Client, params: PinguEventParams): Promise<void | Message> {}
}