import { User, GuildChannel, Client, PermissionString } from "discord.js";
import { PinguLibrary } from ".";
import { config } from '../..'
const { testingMode } = config;
import { DiscordPermissions, BitPermission } from "../../helpers";

export function PermissionCheck(check: { author: User, channel: GuildChannel, client: Client, content: string }, permissions: string[]) {
    if (permissions[0].length == 1) {
        PinguLibrary.errorLog(check.client, `Permissions not defined correctly!`, check.content);
        return "Permissions for this script was not defined correctly!";
    }

    for (var x = 0; x < permissions.length; x++) {
        var permString = permissions[x].toLowerCase().replace('_', ' ');

        if (!checkPermisson(check.channel, check.client.user, permissions[x]))
            return `I don't have permission to **${permString}** in ${check.channel.name}.`;
        else if (!checkPermisson(check.channel, check.author, permissions[x]) &&
            (PinguLibrary.isPinguDev(check.author) && testingMode || !PinguLibrary.isPinguDev(check.author)))
            return `<@${check.author.id}> you don't have permission to **${permString}** in #${check.channel.name}.`;
    }
    return PinguLibrary.PermissionGranted;

    function checkPermisson(channel: GuildChannel, user: User, permission: string) {
        return channel.permissionsFor(user).has(permission as PermissionString);
    }
}
export var PermissionGranted = "Permission Granted";
export function Permissions(): {
    given: BitPermission[],
    missing: BitPermission[],
    all: BitPermission[]
} {
    //let all = Array.from(getPermissions()).reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {});

    let givenStrings = [
        DiscordPermissions.MANAGE_ROLES,
        DiscordPermissions.MANAGE_CHANNELS,
        DiscordPermissions.CHANGE_NICKNAME,
        DiscordPermissions.VIEW_CHANNEL,
        DiscordPermissions.SEND_MESSAGES,
        DiscordPermissions.SEND_TTS_MESSAGES,
        DiscordPermissions.MANAGE_MESSAGES,
        DiscordPermissions.EMBED_LINKS,
        DiscordPermissions.ATTACH_FILES,
        DiscordPermissions.MANAGE_EMOJIS,
        DiscordPermissions.READ_MESSAGE_HISTORY,
        DiscordPermissions.USE_EXTERNAL_EMOJIS,
        DiscordPermissions.ADD_REACTIONS,
        DiscordPermissions.CONNECT,
        DiscordPermissions.SPEAK,
        DiscordPermissions.USE_VAD,
        DiscordPermissions.VIEW_AUDIT_LOG
    ];

    let given = [], missing = [], all = [];
    for (var perm of Array.from(getPermissions())) {
        let permObj = new BitPermission(perm[0], perm[1]);

        if (givenStrings.includes(perm[0]))
            given.push(permObj);
        else missing.push(permObj);
        all.push(permObj);
    }

    return { given, missing, all };

    function getPermissions() {
        let temp = new Map<PermissionString, number>();
        let bits = getBitValues();
        for (var prop in DiscordPermissions) {
            if (prop == 'bitOf') continue;
            temp.set(prop as PermissionString, bits.find(bits => bits.permString == prop).bit);
        }
        return temp;
    }
    function getBitValues() {
        let permissions = Object.keys(DiscordPermissions)
            .map(permString => new BitPermission(permString, 0))
            .filter(perm => perm.permString != 'bitOf');

        for (var i = 0; i < permissions.length; i++)
            permissions[i].bit = i == 0 ? 1 : permissions[i - 1].bit * 2;

        return permissions;
    }
}