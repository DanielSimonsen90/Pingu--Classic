import { Client, Message, MessageAttachment, MessageEmbed, MessageReaction, ReactionCollector, TextChannel, User } from "discord.js";
import { Error } from "../../helpers";
import { PinguLibrary } from "./PinguLibrary";
import { PinguEvents } from "../PinguEvents";
import * as config from '../../config.json';
const { version } = config;
import * as fs from 'fs';

export async function errorLog(client: Client, message: string, messageContent?: string, err?: Error, errorID?: number) {
    //Get #error-log
    var errorlogChannel = PinguLibrary.getChannel(client, PinguLibrary.SavedServers.PinguSupport(client).id, 'error-log-⚠');
    if (!errorlogChannel) return PinguLibrary.DanhoDM(client, `Unable to find #error-log-⚠️ in Pingu Support, ${PinguLibrary.PinguSupportInvite}`);

    //Console error
    console.error(getErrorMessage(message.includes('`') ? message.replace('`', ' ') : message, errorID, messageContent, err));
    
    //Write or append to errorfile
    let errorFilePath = `./errors/${errorID}`;
    if (!PinguLibrary.errorCache.get(errorID)) fs.writeFile(errorFilePath, JSON.stringify(err), () => PinguLibrary.consoleLog(client, `Created error file for error #${errorID}.`));
    else return fs.appendFile(errorFilePath, messageContent, () => PinguLibrary.consoleLog(client, `Appended ${message} to error #${errorID}`));
    
    //Send and react
    let sent = await errorlogChannel.send(getErrorMessage(message, errorID, messageContent, err));
    if (!PinguLibrary.errorCache.get(errorID)) {
        await sent.react(PinguLibrary.SavedServers.DanhoMisc(client).emojis.cache.find(e => e.name == 'Checkmark')); //Mark as resolved
        await sent.react('📄'); //Get error file
    }

    //Create reaction handler
    sent.createReactionCollector((reaction: MessageReaction, user: User) => 
        ['Checkmark', '📄'].includes(reaction.emoji.name) && 
        (reaction.message.channel as TextChannel).name.includes('error-log') &&
        reaction.message.guild.id == PinguLibrary.SavedServers.PinguSupport(client).id
    ).on('collect', (reaction, user) => {
        if (!PinguLibrary.isPinguDev(user)) return reaction.remove();

        if (reaction.emoji.name == '📄'){
           return reaction.message.channel.send(new MessageAttachment(errorFilePath, `Error ${errorID}`)); 
        }

        let errorMessages = PinguLibrary.errorCache.get(errorID);
        errorMessages.forEach(message => {
            message.delete({reason: `Error #${errorID}, was marked as solved by ${user.tag}`})
            PinguLibrary.errorCache.set(errorID, errorMessages.filter(msg => msg.id != message.id))
        });
        fs.unlink(errorFilePath, () => PinguLibrary.consoleLog(client, `Deleted error #${errorID}.`));
    }) 

    let errArr = PinguLibrary.errorCache.get(errorID) || new Array<Message>();
    errArr.push(sent);
    PinguLibrary.errorCache.set(errorID, errArr);

    return sent;

    function getErrorMessage(message: string, id?: number, messageContent?: string, err?: Error) {
        if (!id) id = PinguLibrary.errorCache.size;
        
        let result = {
            errorID: `Error #${id}`,
            format: "```\n",
            providedMessage: `[Provided Message]\n${message}\n\n`,
            errorMessage: `[Error message]: \n${err && err.message}\n\n`,
            messageContent: `[Message content]\n${messageContent}\n\n`,
            stack: `[Stack]\n${err && err.stack}\n\n\n`,
            fileMessage: `${err && err.fileName} threw an error at line ${err && err.lineNumber}!\n\n`
        };

        let returnMessage = (
            result.format +
            errorID +
            (err && err.fileName && err.lineNumber ? result.fileMessage : "") +
            result.providedMessage +
            (messageContent ? result.messageContent : "") +
            (err ? result.errorMessage + result.stack : "") +
            result.format
        );

        PinguLibrary.consoleLog(client, returnMessage);
        return returnMessage
    }
}
export async function pGuildLog(client: Client, script: string, message: string, err ?: Error) {
    var pinguGuildLog = PinguLibrary.getChannel(client, PinguLibrary.SavedServers.PinguSupport(client).id, "pingu-guild-log-🏡");
    if (!pinguGuildLog) return PinguLibrary.DanhoDM(client, `Couldn't get #pingu-guild-log-🏡 in Pingu Support, ${PinguLibrary.PinguSupportInvite}`)

    if (err) {
        var errorLink = (await PinguLibrary.errorLog(client, `PinguGuild Error: "${message}"`, null, err) as Message).url;
        return pinguGuildLog.send(`[**Failed**] [**${script}**]: ${message}\n${err.message}\n\n${errorLink}\n\n<@&756383446871310399>`);
    }
    return pinguGuildLog.send(`[**Success**] [**${script}**]: ${message}`);
}
export async function pUserLog(client: Client, script: string, message: string, err ?: Error) {
    var pinguUserLog = PinguLibrary.getChannel(client, PinguLibrary.SavedServers.PinguSupport(client).id, "pingu-user-log-🧍");
    if (!pinguUserLog) return PinguLibrary.DanhoDM(client, `Couldn't get #pingu-user-log-🧍 in Pingu Support, ${PinguLibrary.PinguSupportInvite}`)

    if (err) {
        var errorLink = (await PinguLibrary.errorLog(client, `PinguUser Error (**${script}**): "${message}"`, null, err) as Message).url;
        return pinguUserLog.send(`[**Failed**] [**${script}**]: ${message}\n${err.message}\n\n${errorLink}\n\n<@&756383446871310399>`);
    }
    return pinguUserLog.send(`[**Success**] [**${script}**]: ${message}`);
}
export async function consoleLog(client: Client, message: string) {
    let timeFormat = `[${new Date(Date.now()).toLocaleTimeString()}]`;
    console.log(`${timeFormat} ${message}`);

    let consoleLogChannel = PinguLibrary.getChannel(client, PinguLibrary.SavedServers.PinguSupport(client).id, "console-log-📝");
    if (!consoleLogChannel) return PinguLibrary.DanhoDM(client, `Unable to find #console-log-📝 in Pingu Support, ${PinguLibrary.PinguSupportInvite}`);

    consoleLogChannel.send(message);
}
export async function eventLog(client: Client, content: MessageEmbed) {
    if (client.user.id == PinguLibrary.Clients.BetaID) return;

    let eventLogChannel = PinguLibrary.getChannel(client, PinguLibrary.SavedServers.PinguSupport(client).id, "event-log-📹");
    if (!eventLogChannel) return PinguLibrary.DanhoDM(client, `Couldn't get #event-log-📹 channel in Pingu Support, ${PinguLibrary.PinguSupportInvite}`)

    if (!PinguEvents.LoggedCache) PinguEvents.LoggedCache = new Array<MessageEmbed>();
    let lastCache = PinguEvents.LoggedCache[0];
    if (lastCache && (
        lastCache.description && lastCache.description == content.description ||
        lastCache.fields[0] && content.fields[0] && lastCache.fields[0].value == content.fields[0].value)
    ) return;

    PinguEvents.LoggedCache.unshift(content);
    return await eventLogChannel.send(content);
}
export async function tellLog(client: Client, sender: User, reciever: User, message: Message | MessageEmbed) {
    if (client.user.id == PinguLibrary.Clients.BetaID) return;

    var tellLogChannel = PinguLibrary.getChannel(client, PinguLibrary.SavedServers.PinguSupport(client).id, 'tell-log-💬');
    if (!tellLogChannel) return PinguLibrary.DanhoDM(client, `Couldn't get #tell-log-💬 channel in Pingu Support, ${PinguLibrary.PinguSupportInvite}`)

    if ((message as object).constructor.name == "Message") {
        var messageAsMessage = message as Message;
        var consoleLog =
            messageAsMessage.content ?
                `${sender.username} sent a message to ${reciever.username} saying ` :
                messageAsMessage.attachments.array().length == 1 ?
                    `${sender.username} sent a file to ${reciever.username}` :
                    messageAsMessage.attachments.array().length > 1 ?
                        `${sender.username} sent ${messageAsMessage.attachments.array().length} files to ${reciever.username}` :
                        `${sender.username} sent something unknown to ${reciever.username}!`;

        if (messageAsMessage.content) consoleLog += messageAsMessage.content;
        if (messageAsMessage.attachments) consoleLog += messageAsMessage.attachments.map(a => `\n${a.url}`);

        PinguLibrary.consoleLog(client, consoleLog);

        var format = (ping: boolean) => `${new Date(Date.now()).toLocaleTimeString()} [<@${(ping ? sender : sender.username)}> ➡️ <@${(ping ? reciever : reciever.username)}>]`;

        if (messageAsMessage.content && messageAsMessage.attachments)
            tellLogChannel.send(format(false) + `: ||${messageAsMessage.content}||`, messageAsMessage.attachments.array())
                .then(sent => sent.edit(format(true) + `: ||${messageAsMessage.content}||`));

        else if (messageAsMessage.content)
            tellLogChannel.send(format(false) + `: ||${messageAsMessage.content}||`)
                .then(sent => sent.edit(format(true) + `: ||${messageAsMessage.content}||`));

        else if (messageAsMessage.attachments)
            tellLogChannel.send(format(false), messageAsMessage.attachments.array())
                .then(sent => sent.edit(format(true)));

        else PinguLibrary.errorLog(client, `${sender} ➡️ ${reciever} sent something that didn't have content or attachments`)
        .then(() => PinguLibrary.errorLog(client, `message:`, JSON.stringify(message.toJSON()), null, PinguLibrary.errorCache.size - 1))
        .then(() => tellLogChannel.send(`Ran else statement - I've contacted my developers!`));
    }
    else if ((message as MessageEmbed).constructor.name == "MessageEmbed") {
        PinguLibrary.consoleLog(client, `The link between ${sender.username} & ${reciever.username} was unset.`);
        tellLogChannel.send(message as MessageEmbed)
    }
}
export async function latencyCheck(message: Message) {
    //Get latency
    let pingChannel = PinguLibrary.getChannel(message.client, PinguLibrary.SavedServers.PinguSupport(message.client).id, "ping-log-🏓");
    if (!pingChannel) return PinguLibrary.DanhoDM(message.client, `Couldn't get #ping-log-🏓 channel in Pingu Support, ${PinguLibrary.PinguSupportInvite}`)

    if (message.channel == pingChannel || message.author.bot) return null;

    let pingChannelSent = await pingChannel.send(`Calculating ping`);

    let latency = pingChannelSent.createdTimestamp - message.createdTimestamp;
    pingChannelSent.edit(latency + 'ms');

    //Get outages channel
    let outages = PinguLibrary.getChannel(message.client, PinguLibrary.SavedServers.PinguSupport(message.client).id, "outages-😵");
    if (!outages) return PinguLibrary.errorLog(message.client, `Unable to find #outages-😵 channel from LatencyCheck!`);

    //Set up to find last Pingu message
    let outagesMessages = outages.messages.cache.array();
    let outageMessagesCount = outagesMessages.length - 1;

    //Find Pingu message
    for (var i = outageMessagesCount - 1; i >= 0; i--) {
        if (outagesMessages[i].author != message.client.user) continue;
        var lastPinguMessage = outagesMessages[i];
    }

    if (!lastPinguMessage) return null;

    let sendMessage = !lastPinguMessage.content.includes(`I have a latency delay on`);
    if (!sendMessage) {
        let lastMessageArgs = lastPinguMessage.content.split(` `);
        let lastLatencyExclaim = lastMessageArgs[lastMessageArgs.length - 1];
        let lastLatency = parseInt(lastLatencyExclaim.substring(0, lastLatencyExclaim.length - 1));

        if (lastLatency > 1000)
            return lastPinguMessage.edit(`I have a latency delay on ${latency}!`);
    }

    if (latency > 1000) PinguLibrary.outages(message.client, `I have a latency delay on ${latency}!`);
}
export async function raspberryLog(client: Client) {
    if (client.user.id == PinguLibrary.Clients.BetaID) return;

    let raspberryLogChannel = PinguLibrary.getChannel(client, PinguLibrary.SavedServers.PinguSupport(client).id, 'raspberry-log-🍇');
    if (!raspberryLogChannel) return PinguLibrary.DanhoDM(client, `Couldn't get #raspberry-log-🍇 channel in Pingu Support, ${PinguLibrary.PinguSupportInvite}`)

    return raspberryLogChannel.send(`Pulled version ${version} from Github`);
}