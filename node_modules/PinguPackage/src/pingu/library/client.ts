import { ActivityType, Client, Collection, User, VoiceChannel } from "discord.js";
import { config, PinguLibrary, PinguUser } from "../..";
const { Prefix, BetaPrefix, updateStats } = config;


export function setActivity(client: Client) {
    class Activity {
        constructor(text: string, type: ActivityType) {
            this.text = text;
            this.type = type;
        }
        public text: string
        public type: ActivityType
    }

    internalSetActivity();
    if (updateStats) UpdateStats();

    setInterval(internalSetActivity, 86400000);
    try { setInterval(UpdateStats, 86400000) }
    catch (err) { PinguLibrary.errorLog(client, `Updating Stats failed`, null, err); }
    function internalSetActivity() {
        let date = {
            day: new Date(Date.now()).getDate(),
            month: new Date(Date.now()).getMonth() + 1,
            year: new Date(Date.now()).getFullYear()
        };

        var activity = new Activity('your screams for', 'LISTENING');
        if (client.user.id == PinguLibrary.Clients.BetaID) activity = new Activity('Danho cry over bad code', 'WATCHING');

        if (date.month == 12)
            activity = date.day < 26 ?
                new Activity('Jingle Bells...', 'LISTENING') :
                new Activity('fireworks go boom', 'WATCHING');
        else if (date.month == 5)
            activity =
                date.day == 3 ? new Activity(`Danho's birthday wishes`, 'LISTENING') :
                    date.day == 4 ? new Activity('Star Wars', 'WATCHING') : null;

        if (!activity) activity = new Activity('your screams for', 'LISTENING');

        client.user.setActivity(activity.text + ` ${PinguLibrary.DefaultPrefix(client)}help`, { type: activity.type })
        PinguLibrary.raspberryLog(client);
    }
    async function UpdateStats() {
        let getChannel = (client: Client, channelID: string) => PinguLibrary.SavedServers.PinguSupport(client).channels.cache.get(channelID) as VoiceChannel;
        let channels = [
            getChannel(client, '799596588859129887'), //Servers
            getChannel(client, '799597092107583528'), //Users
            getChannel(client, '799597689792757771'), //Daily Leader
            getChannel(client, '799598372217683978'), //Server of the Day
            getChannel(client, '799598024971518002'), //User of the Day
            getChannel(client, '799598765187137537')  //Most known member
        ]
        let setName = async (channel: VoiceChannel) => {
            let getInfo = async (channel: VoiceChannel) => {
                switch (channel.id) {
                    case '799596588859129887': return getServersInfo(); //Servers
                    case '799597092107583528': return getUsersInfo(); //Users
                    case '799597689792757771': return await getDailyLeader(); //Daily Leader
                    case '799598372217683978': return getRandomServer(); //Server of the Day
                    case '799598024971518002': return getRandomUser(); //User of the Day
                    case '799598765187137537': return getMostKnownUser(); //Most known User
                    default: PinguLibrary.errorLog(client, `ID of ${channel.name} was not recognized!`); return "No Info";
                }

                function getServersInfo() {
                    return client.guilds.cache.size.toString();
                }
                function getUsersInfo() {
                    return client.users.cache.size.toString();
                }
                async function getDailyLeader() {
                    try {
                        let pUser = (await PinguUser.GetPUsers()).sort((a, b) => {
                            try { return b.daily.streak - a.daily.streak }
                            catch (err) { PinguLibrary.errorLog(client, `unable to get daily streak difference between ${a.tag} and ${b.tag}`, null, err); }

                        })[0];
                        return `${pUser.tag} #${pUser.daily.streak}`;
                    }
                    catch (err) { PinguLibrary.errorLog(client, `Unable to get Daily Leader`, null, err); }
                }
                function getRandomServer() {
                    let availableGuilds = client.guilds.cache.array().map(g => ![
                        PinguLibrary.SavedServers.DanhoMisc(client).id,
                        PinguLibrary.SavedServers.PinguEmotes(client).id,
                        PinguLibrary.SavedServers.PinguSupport(client).id,
                    ].includes(g.id) && g.name != undefined && g).filter(v => v);
                    let index = Math.floor(Math.random() * availableGuilds.length);
                    return availableGuilds[index].name;
                }
                function getRandomUser() {
                    let availableUsers = client.users.cache.array().map(u => !u.bot && u).filter(v => v);
                    return availableUsers[Math.floor(Math.random() * availableUsers.length)].tag;
                }
                function getMostKnownUser() {
                    let Users = new Collection<User, number>();

                    client.guilds.cache.forEach(guild => {
                        guild.members.cache.forEach(gm => {
                            let { user } = gm;
                            if (user.bot) return;

                            if (!Users.has(user))
                                return Users.set(user, 1);

                            Users.set(user, Users.get(user) + 1);
                        })
                    });

                    let sorted = Users.sort((a, b) => b - a);
                    let strings = sorted.filter((v, u) => sorted.first() == v).map((v, u) => `${u.tag} | #${v}`);
                    return strings[Math.floor(Math.random() * strings.length)];
                }
            };
            let channelName = channel.name.split(':')[0];
            let info = await getInfo(channel);
            let newName = `${channelName}: ${info}`;
            if (channel.name == newName) return;
            return channel.setName(newName);
        }

        for (var channel of channels) setName(channel);
    }
}
export var DefaultEmbedColor = 3447003;
export function DefaultPrefix(client: Client): string {
    return client.user.id == PinguLibrary.Clients.PinguID ? Prefix : BetaPrefix;
}
export var Clients = {
    PinguID: '562176550674366464',
    BetaID: '778288722055659520'
}