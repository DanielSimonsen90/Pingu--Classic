import { Client, User } from "discord.js";
import * as PinguUserSchema from '../../MongoSchemas/PinguUser';
import { Error } from "../../helpers";
import { PinguLibrary } from '../library/PinguLibrary';
import { PinguUser } from '../user/PinguUser';

export async function WritePUser(client: Client, user: User, scriptName: string, succMsg: string, errMsg: string) {
    PinguLibrary.DBExecute(client, async mongoose => {
        let created = await new PinguUserSchema(new PinguUser(user)).save();
        if (!created) PinguLibrary.pUserLog(client, scriptName, errMsg);
        else PinguLibrary.pUserLog(client, scriptName, succMsg);
    });
}
export async function GetPUser(user: User): Promise<PinguUser> {
    let pUserDoc = await PinguUserSchema.findOne({ _id: user.id }).exec();
    return pUserDoc ? pUserDoc.toObject() : null;
}
export async function UpdatePUser(client: Client, updatedProperty: object, pUser: PinguUser, scriptName: string, succMsg: string, errMsg: string): Promise<PinguUser> {
    return await PinguUserSchema.updateOne({ _id: pUser._id }, updatedProperty, null, err => {
        if (err) PinguLibrary.pUserLog(client, scriptName, errMsg, err);
        else PinguLibrary.pUserLog(client, scriptName, succMsg);
    })
}
export async function DeletePUser(client: Client, user: User, scriptName: string, succMsg: string, errMsg: string): Promise<PinguUser> {
    return await PinguUserSchema.deleteOne({ _id: user.id }, null, err => {
        if (err) PinguLibrary.pUserLog(client, scriptName, errMsg, new Error(err));
        else PinguLibrary.pUserLog(client, scriptName, succMsg);
    });
}

export async function GetPUsers(): Promise<PinguUser[]> {
    return (await PinguUserSchema.find({}).exec()).map(collDoc => collDoc.toObject());
}