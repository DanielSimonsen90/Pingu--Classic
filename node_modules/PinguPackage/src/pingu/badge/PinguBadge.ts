type DeveloperBadge = 'Pingu Developer' | 'Discord Bot Developer';
type StaffBadge = 'Pingu Staff Member' | 'Pingu Support Team' | 'Pingu Moderator Team' | 'Pingu Administrators';
type PinguSupporter = 'Early Supporter' | 'Patreon Supporter';
type PinguPartners = 'Partnered Developer' | 'Partnered Server Owner';

type IAmBadge = DeveloperBadge | StaffBadge | PinguSupporter | PinguPartners;

import { GuildEmoji, Collection, User, Guild } from "discord.js";
export class PinguBadge {
    constructor(name: IAmBadge, emoji: GuildEmoji) {
        this.name = name;
        this.emoji = emoji;
    }

    public name: IAmBadge;
    public emoji: GuildEmoji;
}

import { SavedServers, SavedServerNames } from "../library/PinguLibrary";
class TempBadge {
    constructor(name: IAmBadge, emojiName: string, guild: SavedServerNames) {
        this.name = name;
        this.emojiName = emojiName;   
        this.guild = guild;   
    }

    public name: IAmBadge;
    public emojiName: string;
    public guild: SavedServerNames;
}
const badges = [
    new TempBadge('Pingu Developer', 'PinguDeveloper', 'Pingu Support'),
    new TempBadge('Discord Bot Developer', 'BadgeEarlyVerifiedBotDeveloper', 'Danho Misc'),
    
    new TempBadge('Pingu Staff Member', 'BadgeStaffTeam', 'Pingu Support'),
    new TempBadge('Pingu Support Team', 'BadgeSupportTeam', 'Pingu Support'),
    new TempBadge('Pingu Moderator Team', 'BadgeModeratorTeam', 'Pingu Support'),
    new TempBadge('Pingu Administrators', 'BadgeAdministratorTeam', 'Pingu Support'),

    new TempBadge('Early Supporter', 'BadgeEarlySupporter', 'Danho Misc'),
    // new TempBadge('Patreon Supporter', null, 'Pingu Support'),
    
    new TempBadge('Partnered Developer', 'PinguPartnerDev', 'Pingu Support'),
    new TempBadge('Partnered Server Owner', 'PinguPartnerServer', 'Pingu Support')
]
export const Badges = new Collection<IAmBadge, GuildEmoji>();
export function SetBadges() {
    for (const badge of badges) {
        let guild = SavedServers.get(badge.guild);
        let emoji = guild.emojis.cache.find(e => e.name == badge.emojiName);
        Badges.set(badge.name, emoji);
    }
    return Badges;
}

import { GetPUser } from "../user/PinguUser";
export async function getBadges(user: User) {
    const PinguSupportMembers = SavedServers.get('Pingu Support').members;
    
    let isPinguSupportMember = PinguSupportMembers.cache.has(user.id);
    if (!isPinguSupportMember) return null;

    let rolesToGiveBadge = (function setRolesToGive() {
        return new Collection<string, IAmBadge>()
        .set('Discord Bot Developer', 'Discord Bot Developer')
        .set('Partnered Server Owner', 'Partnered Server Owner')
        .set('Partnered Bot Developer', 'Partnered Developer')
        .set('Pingu Staff', 'Pingu Staff Member')
        .set('Support Team', 'Pingu Support Team')
        .set('Moderators', 'Pingu Moderator Team')
        .set('Administrators', 'Pingu Administrators')
        .set('Pingu Developers', 'Pingu Developer');
    })();

    let member = await PinguSupportMembers.fetch(user);
    let badges = member.roles.cache
        .map(role => rolesToGiveBadge.get(role.name))   //For each role member has, get a "IAmBadge" type if applicable
        .filter(v => v)                                 //Filter away those that are null/undefined
        .map(name => Badges.get(name));                 //Convert IAmBadge to GuildEmoji

    const releaseDate = Date.now(); //TODO: Change when Pingu is finally released
    let pUser = await GetPUser(user);
    if (new Date(pUser.joinedAt).getTime() < releaseDate)
        badges.push(Badges.get('Early Supporter'));

    //Add Patreon badge

    return badges;
}