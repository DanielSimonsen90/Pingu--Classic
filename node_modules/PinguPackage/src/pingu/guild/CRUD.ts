import { Client, Guild } from 'discord.js'
import { PinguGuild, PinguLibrary } from '../..';
import { Error } from '../../helpers';
import * as PinguGuildSchema from '../../MongoSchemas/PinguGuild';

export async function WritePGuild(client: Client, guild: Guild, scriptName: string, succMsg: string, errMsg: string) {
    PinguLibrary.DBExecute(client, async mongoose => {
        let created = await new PinguGuildSchema(new PinguGuild(guild, !guild.owner ? guild.member(await client.users.fetch(guild.ownerID)) : null));
        if (!created) return PinguLibrary.pGuildLog(client, scriptName, errMsg);

        created.save();
        return PinguLibrary.pGuildLog(client, scriptName, succMsg);
    });
}
export async function GetPGuild(guild: Guild): Promise<PinguGuild> {
    if(!guild) return null;
    let pGuildDoc = await PinguGuildSchema.findOne({ _id: guild.id }).exec();
    return pGuildDoc ? pGuildDoc.toObject() : null;
}
export async function UpdatePGuild(client: Client, updatedProperty: object, pGuild: PinguGuild, scriptName: string, succMsg: string, errMsg: string) {
    let guild = await client.guilds.fetch(pGuild._id);
    if (!guild) throw new Error({ message: `Guild not found!` });

    PinguGuildSchema.updateOne({ _id: pGuild._id }, updatedProperty, null, err => {
        if (err) PinguLibrary.pGuildLog(client, scriptName, errMsg, err);
        else PinguLibrary.pGuildLog(client, scriptName, succMsg);
    });
}
export async function DeletePGuild(client: Client, guild: Guild, scriptName: string, succMsg: string, errMsg: string): Promise<PinguGuild> {
    return await PinguGuildSchema.deleteOne({ _id: guild.id }, null, err => {
        if (err) PinguLibrary.pGuildLog(client, scriptName, errMsg, new Error(err));
        else PinguLibrary.pGuildLog(client, scriptName, succMsg);
    });
}

export async function GetPGuilds(): Promise<PinguGuild[]> {
    return(await PinguGuildSchema.find({}).exec()).map(collDoc => collDoc.toObject());
}