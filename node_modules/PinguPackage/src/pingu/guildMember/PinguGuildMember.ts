import { Guild, GuildMember } from "discord.js";
import { PGuildMember, PGuild } from "../../database/json";
import { AchievementCheckType } from "../achievements";
import { GuildMemberAchievementConfig, GuildMemberAchievementNotificationType } from "../achievements/config/GuildMemberAchievementConfig";
import { GuildAchievementConfig } from '../achievements/config/GuildAchievementConfig';
import BasePinguClient from '../client/BasePinguClient';
 
export async function WritePGuildMember(member: GuildMember, scriptName: string) {
    if (member.user.bot) return null;
    const { client: _client, guild, id, user } = member;
    const client = _client as BasePinguClient;
    
    let pGuild = client.pGuilds.get(guild);
    const { config } = pGuild.settings;
    if (!config.achievements.notificationTypes) {
        pGuild.settings.config.achievements = new GuildAchievementConfig({ guild: 'NONE', members: 'NONE' }, pGuild._id);
        await client.pGuilds.update(pGuild, `WritePGuildMember: ${scriptName}`, 'PinguGuild did not have NotificationType')
    }

    let pGuildMember = new PinguGuildMember(member, pGuild.settings.config.achievements.notificationTypes.members);
    pGuild.members.set(id, pGuildMember);
    await client.pGuilds.update(pGuild, scriptName, `${user.tag} was added to ${pGuild.name}'s PinguGuild.members.`)

    //Add join achievement
    await AchievementCheckType(client, 'GUILDMEMBER', member, 'EVENT', 'guildMemberAdd', pGuildMember.achievementConfig, 'EVENT', [member]);

    return pGuildMember;
}
export async function GetPGuildMember(member: GuildMember, scriptName: string) {
    if (!member) return null;

    const { client: _client, id, guild } = member;
    const client = _client as BasePinguClient;

    let pGuild = client.pGuilds.get(guild);
    if (!pGuild) {
        client.log('error', `${guild} does not have a PinguGuild, or I couldn't get it!`);
        return null;
    }

    let pgm = pGuild.members.get(id); //Can returns Mongoose.Document<PinguGuildMember>(?)
    return pgm ? (pgm as any).toObject ? (pgm as any).toObject() as PinguGuildMember : pgm : WritePGuildMember(member, scriptName)
}
export async function UpdatePGuildMember(member: GuildMember, pGuildMember: PinguGuildMember, scriptName: string, reason: string) {
    const { guild, client: _client } = member;
    const client = _client as BasePinguClient;

    let pGuild = client.pGuilds.get(guild);
    pGuild.members.set(pGuildMember._id, pGuildMember);

    client.pGuilds.update(pGuild, scriptName, reason);
    return pGuildMember;
}
export async function DeletePGuildMember(member: GuildMember) {
    const { client: _client, guild, id, user } = member;
    const client = _client as BasePinguClient;

    const pGuild = client.pGuilds.get(guild);
    pGuild.members.delete(id);
    client.pGuilds.update(pGuild, `guildMemberRemove`, `**${pGuild.name}**'s members, after **${user.tag}** left the guild.`)
    return;
}
export async function GetPGuildMembers(guild: Guild) {
    const { client: _client } = guild;
    const client = _client as BasePinguClient;

    const pGuild = client.pGuilds.get(guild);
    let members = new Array<PinguGuildMember>();
    pGuild.members.forEach(v => members.push(v));
    return members;
}

export class PinguGuildMember extends PGuildMember {
    //#region Statics
    /**Writes and adds Member as PinguGuildMember to database and returns the new object
     * @param member Member to add as PinguGuildMember
     * @param log Whether to log it in #pGuildLog or not
     * @returns The new PinguGuildMember*/
    public static async Write(member: GuildMember, scriptName: string) { return WritePGuildMember(member, scriptName); }
    /**Get the PinguGuildMember from provided member
     * @param member Member to get as PinguGuildMember
     * @param scriptName Script that called the method
     * @returns The provided member as PinguGuildMember*/
    public static async Get(member: GuildMember, scriptName: string) { return GetPGuildMember(member, scriptName); }
    /**Updates provided PinguGuildMember to the database
     * @param member Member to update
     * @param pGuildMember PinguGuildMember update
     * @param scriptName Script that called the method
     * @param reason Reason for updating the PinguGuildMember
     * @returns The updated PinguGuildMember*/
    public static async Update(member: GuildMember, pGuildMember: PinguGuildMember, scriptName: string, reason: string)  { return UpdatePGuildMember(member, pGuildMember, scriptName, reason); }
    /**Deletes provided member from their guild's PinguGuild's members map
     * @param member Member to delete
     * @returns what should it return?*/
    public static async Delete(member: GuildMember) { return DeletePGuildMember(member); }
    /**Get all PinguGuildMembers from specified guild
     * @param guild Guild to get all PinguGuildMembers from
     * @returns All PinguGuildMembers from specified guild*/
    public static async GetGuildMembers(guild: Guild) { return GetPGuildMembers(guild); }
    //#endregion

    constructor(member: GuildMember, achievementNotificationType: GuildMemberAchievementNotificationType) {
        super(member);
        this.guild = new PGuild(member.guild);
        this.achievementConfig = new GuildMemberAchievementConfig(achievementNotificationType);
    }

    public guild: PGuild;
    public achievementConfig: GuildMemberAchievementConfig
    //public warnings: ??
}

export default PinguGuildMember;